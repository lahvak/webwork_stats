## DESCRIPTION
## Probability spaces: Construct a random variable
## ENDDESCRIPTION

## KEYWORDS('probability', 'probability space', 'random variable', 'definition')

## DBsubject(Probability)
## DBchapter(Random Variables)
## DBsection(Definition of random variable)
## Date(11/10/2018)
## Institution(SVSU)
## Author(Jan Hlavacek)
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')


###########################
#  Initialization

DOCUMENT();  

loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "PGchoicemacros.pl",
  "PGML.pl",
  "niceTables.pl",
  "PGcourse.pl",
  "parserMultiAnswer.pl",
);

TEXT(beginproblem());


###########################
#  Setup

$showPartialCorrectAnswers = 1;

@sspace = a..f;

@slice = NchooseK(6,6);
@perm = @sspace[@slice];

$one = $perm[0];
@two = @perm[(1,2)];
@three = @perm[3..5];

sub my_sort {
       PGsort sub {$_[0] lt $_[1]}, @_;
}

sub mkset {
    my @members = @_;
    return "\left\{" . join(",", my_sort(@members)) . "\right\}";
}

$set1 = "\left\{ $one \right\}";
$set2 = &mkset(@two);
$set3 = &mkset(@three);
$set4 = &mkset((@two, $one));
$set5 = &mkset((@three, $one));
$set6 = &mkset((@two, @three));
$set7 = &mkset(@sspace);

@ans = (1,1,1,1,1,1);
@ans[@slice[(1,2)]] = (2,2);
@ans[@slice[3..5]] = (3,3,3);

Context("Numeric");

$multians = MultiAnswer(@ans)->with(
  singleResult => 1,
  checker => sub {
      my ( $correct, $student, $self ) = @_;
      my @sans = @{$student};
      if ( $sans[$slice[1]] != $sans[$slice[2]] ||
           $sans[$slice[3]] != $sans[$slice[4]] ||
           $sans[$slice[3]] != $sans[$slice[5]] ||
           $sans[$slice[4]] != $sans[$slice[5]] ) {
           Value::Error("This is not a random variable on the given probability space!");
      } else {
          if ( $sans[$slice[0]] == $sans[$slice[1]] ||
               $sans[$slice[0]] == $sans[$slice[3]] ||
               $sans[$slice[2]] == $sans[$slice[3]]) {
              Value::Error("This random variable has too few possible values!");
          } else {
              return 1;
          }
       }
   }
);

###########################
#  Main text

BEGIN_PGML
The sample space for an experiment is [` S = \{a, b, c, d, e, f\} `].  The collection of observable events is 

>>[`` \mathcal{E} = \left\{ \emptyset, [$set1], [$set2], [$set3], [$set4], [$set5], [$set6], [$set7] \right\} ``].<<

Fill in the table so that it defines a random variable on the probability space with this sample space and this collection of observable events,
with the *maximal number of possible values*:

[@ DataTable( [[["\\(s\\)", midrule=>1], 'a','b','c','d','e','f'], 
               ["\\(X\\)",
               PGML('[____]{$multians}'),
               PGML('[____]{$multians}'),
               PGML('[____]{$multians}'),
               PGML('[____]{$multians}'),
               PGML('[____]{$multians}'),
               PGML('[____]{$multians}')
               ]],
             align => 'c|c|c|c|c|c') @]***

END_PGML

############################
#  Solution

BEGIN_PGML_SOLUTION
The field of observable events shows us that the outcomes [$perm[1]] and [$perm[2]] are indistinguishable, as are the outcomes [$perm[3]], [$perm[4]] and [$perm[5]]. Therefore every random variable on this probability space must assign the same value to [$perm[1]] and [$perm[2]], and (possibly different) same value to [$perm[3]], [$perm[4]] and [$perm[5]].

On the other hand, in order to get the maximal number of possible values, the variable should not assign the same value to outcomes that are distinguishable.  Therefore [$perm[0]] must be assigned value different from both [$perm[1]] and [$perm[3]], and [$perm[1]] and [$perm[3]] must be assigned values different form each other.

One possible assignment is

[@ DataTable( [[["\\(s\\)", midrule=>1], 'a','b','c','d','e','f'], 
               ["\\(X\\)",
               [$ans[0]],
               [$ans[1]],
               [$ans[2]],
               [$ans[3]],
               [$ans[4]],
               [$ans[5]],
               ]],
             align => 'c|c|c|c|c|c') @]***

Many other assignments are possible.
END_PGML_SOLUTION
ENDDOCUMENT();
